USE [VXI_GAMS_US]
GO

ALTER TABLE [dbo].[Assets] ADD [Vendor] [varchar](max)
ALTER TABLE [dbo].[Assets] ADD [PurchaseOrder] [varchar](max)
ALTER TABLE [dbo].[Assets] ADD [CostValue] [varchar](max)
ALTER TABLE [dbo].[AssetUploads] ADD [Vendor] [varchar](max)
ALTER TABLE [dbo].[AssetUploads] ADD [PurchaseOrder] [varchar](max)
ALTER TABLE [dbo].[AssetUploads] ADD [CostValue] [varchar](max)
ALTER TABLE [dbo].[AssignAssetEmployees] ADD [Email] [varchar](max)
ALTER TABLE [dbo].[AssignAssetEmployees] ADD [TrackingNo] [varchar](max)
ALTER TABLE [dbo].[AssignAssetEmployees] ADD [TicketNo] [varchar](max)
ALTER TABLE [dbo].[AssignAssetEmployeeHistories] ADD [Email] [varchar](max)
ALTER TABLE [dbo].[AssignAssetEmployeeHistories] ADD [TrackingNo] [varchar](max)
ALTER TABLE [dbo].[AssignAssetEmployeeHistories] ADD [TicketNo] [varchar](max)
ALTER TABLE [dbo].[AssignAssetEmployeeUploads] ADD [Email] [varchar](max)
ALTER TABLE [dbo].[AssignAssetEmployeeUploads] ADD [TrackingNo] [varchar](max)
ALTER TABLE [dbo].[AssignAssetEmployeeUploads] ADD [TicketNo] [varchar](max)
ALTER TABLE [dbo].[LocationTransferHistories] ADD [TrackingNo] [varchar](max)
ALTER TABLE [dbo].[LocationTransferHistories] ADD [TicketNo] [varchar](max)
ALTER TABLE [dbo].[LocationTransferUploads] ADD [TrackingNo] [varchar](max)
ALTER TABLE [dbo].[LocationTransferUploads] ADD [TicketNo] [varchar](max)
ALTER TABLE [dbo].[RemoveAssignedAssetEmployeeHistories] ADD [TrackingNo] [varchar](max)
ALTER TABLE [dbo].[RemoveAssignedAssetEmployeeHistories] ADD [TicketNo] [varchar](max)
ALTER TABLE [dbo].[RemoveAssignedAssetEmployeeUploads] ADD [TrackingNo] [varchar](max)
ALTER TABLE [dbo].[RemoveAssignedAssetEmployeeUploads] ADD [TicketNo] [varchar](max)
ALTER TABLE [dbo].[ReplaceHistories] ADD [FromVendor] [varchar](max)
ALTER TABLE [dbo].[ReplaceHistories] ADD [ToVendor] [varchar](max)
ALTER TABLE [dbo].[ReplaceHistories] ADD [FromPurchaseOrder] [varchar](max)
ALTER TABLE [dbo].[ReplaceHistories] ADD [ToPurchaseOrder] [varchar](max)
ALTER TABLE [dbo].[ReplaceHistories] ADD [FromCostValue] [varchar](max)
ALTER TABLE [dbo].[ReplaceHistories] ADD [ToCostValue] [varchar](max)
ALTER TABLE [dbo].[ReplaceUploads] ADD [Vendor] [varchar](max)
ALTER TABLE [dbo].[ReplaceUploads] ADD [PurchaseOrder] [varchar](max)
ALTER TABLE [dbo].[ReplaceUploads] ADD [CostValue] [varchar](max)
INSERT [dbo].[__MigrationHistory]([MigrationId], [ContextKey], [Model], [ProductVersion])
VALUES (N'202101212343274_CheckPending', N'VXI_GAMS_US.DATA.Migrations.Configuration',   , N'6.4.4')

CREATE TABLE [dbo].[AssignedAssetChangeHistories] (
    [Id] [uniqueidentifier] NOT NULL,
    [CodeFrom] [varchar](max),
    [CodeTo] [varchar](max),
    [TrackingNo] [varchar](max),
    [TicketNo] [varchar](max),
    [CreatedBy] [varchar](max),
    [DateCreated] [datetime] NOT NULL,
    CONSTRAINT [PK_dbo.AssignedAssetChangeHistories] PRIMARY KEY ([Id])
)
CREATE TABLE [dbo].[AssignedAssetChangeUploads] (
    [Id] [uniqueidentifier] NOT NULL,
    [FromCode] [varchar](max),
    [ToCode] [varchar](max),
    [TrackingNo] [varchar](max),
    [TicketNo] [varchar](max),
    [CreatedBy] [varchar](max),
    CONSTRAINT [PK_dbo.AssignedAssetChangeUploads] PRIMARY KEY ([Id])
)
INSERT [dbo].[__MigrationHistory]([MigrationId], [ContextKey], [Model], [ProductVersion])
VALUES (N'202101262015018_CheckPending', N'VXI_GAMS_US.DATA.Migrations.Configuration',  

/****** Object:  StoredProcedure [dbo].[spReplaceUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
DROP PROCEDURE IF EXISTS [dbo].[spReplaceUploads]
GO
/****** Object:  StoredProcedure [dbo].[spRemoveAssignedAssetEmployeeUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
DROP PROCEDURE IF EXISTS [dbo].[spRemoveAssignedAssetEmployeeUploads]
GO
/****** Object:  StoredProcedure [dbo].[spLocationTransferUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
DROP PROCEDURE IF EXISTS [dbo].[spLocationTransferUploads]
GO
/****** Object:  StoredProcedure [dbo].[spGetScannedAsset]    Script Date: 1/27/2021 9:32:38 AM ******/
DROP PROCEDURE IF EXISTS [dbo].[spGetScannedAsset]
GO
/****** Object:  StoredProcedure [dbo].[spGetAssetsRaw]    Script Date: 1/27/2021 9:32:38 AM ******/
DROP PROCEDURE IF EXISTS [dbo].[spGetAssetsRaw]
GO
/****** Object:  StoredProcedure [dbo].[spGetAssetsByHrid]    Script Date: 1/27/2021 9:32:38 AM ******/
DROP PROCEDURE IF EXISTS [dbo].[spGetAssetsByHrid]
GO
/****** Object:  StoredProcedure [dbo].[spGetAssets]    Script Date: 1/27/2021 9:32:38 AM ******/
DROP PROCEDURE IF EXISTS [dbo].[spGetAssets]
GO
/****** Object:  StoredProcedure [dbo].[spAssignedAssetChangeUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
DROP PROCEDURE IF EXISTS [dbo].[spAssignedAssetChangeUploads]
GO
/****** Object:  StoredProcedure [dbo].[spAssignAssetEmployeeUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
DROP PROCEDURE IF EXISTS [dbo].[spAssignAssetEmployeeUploads]
GO
/****** Object:  StoredProcedure [dbo].[spAssetUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
DROP PROCEDURE IF EXISTS [dbo].[spAssetUploads]
GO
/****** Object:  StoredProcedure [dbo].[spAssetUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spAssetUploads]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[spAssetUploads] AS' 
END
GO
-- =============================================
-- Author:		Mark Magaoay
-- Update Date: 01/22/2021
-- Description:	This will update asset data
-- =============================================
ALTER PROCEDURE [dbo].[spAssetUploads]
(
@createdBy VARCHAR(10) = NULL
)
AS
BEGIN

		SET NOCOUNT ON;

		BEGIN TRY	

			DECLARE @date DATETIME = GETDATE()
			DECLARE @count INT = 0
			DECLARE @InvalidCodes VARCHAR(MAX) = NULL
			BEGIN TRANSACTION
	
			IF OBJECT_ID('tempdb..#InvalidCodes') IS NOT NULL 
			BEGIN
				DROP TABLE #InvalidCodes
			END

			SELECT a.SerialNo[Code] INTO #InvalidCodes FROM dbo.AssetUploads a WHERE a.CreatedBy = @createdBy
			AND EXISTS(SELECT 1 FROM dbo.Assets b WHERE b.SerialNo = a.SerialNo)

			SET @InvalidCodes = (SELECT (',[' + Code + ']') AS [text()] FROM #InvalidCodes FOR XML PATH(''))

			IF @InvalidCodes IS NOT NULL
			BEGIN
				DECLARE @MSG VARCHAR(2048) = FORMATMESSAGE('SERIALS %s ALREADY USED', STUFF(('' + @InvalidCodes),1,1,''));
				RAISERROR (@MSG,16,1);
			END

			SELECT @count = COUNT(1) FROM dbo.Assets WHERE YEAR(DateCreated) = YEAR(@date)
	
			INSERT INTO dbo.Assets (Id,
									Code,
									Description,
									SerialNo,
									CategoryId,
									SubCategoryId,
									StatusId,
									IsActive,
									CreatedBy,
									DateCreated,
									ManufacturerId,
									Year,
									Month,
									IsDisposed,
									Site,
									Vendor,
									PurchaseOrder,
                                    CostValue
									)

			SELECT 
			NEWID(),
			CONCAT(YEAR(@date), RIGHT('00'+CAST(MONTH(@date) AS VARCHAR(2)),2), RIGHT('00000'+CAST((@count+(ROW_NUMBER() OVER (ORDER BY a.Category))) AS VARCHAR(5)),5)),
			a.Description,
			a.SerialNo,
			b.Id,
			c.Id,
			e.Id,
			1,
			a.CreatedBy,
			@date,
			d.Id,
			YEAR(@date),
			MONTH(@date),
			0,
			RTRIM(LTRIM(a.Site)),
			a.Vendor,
			a.PurchaseOrder,
			a.CostValue
			FROM dbo.AssetUploads a		
			LEFT JOIN dbo.Categories b ON UPPER(b.Code) = UPPER(a.Category)
			LEFT JOIN dbo.SubCategories c ON c.CategoryId = b.Id AND UPPER(c.Code) = UPPER(a.SubCategory)
			LEFT JOIN dbo.Manufacturers d ON UPPER(d.Code) = UPPER(a.Manufacturer)
			LEFT JOIN dbo.Status e ON UPPER(e.Code) = UPPER(a.Status)
			WHERE a.CreatedBy = @createdBy
	
			DELETE FROM dbo.AssetUploads WHERE CreatedBy = @createdBy

			COMMIT TRANSACTION;
		END TRY
		BEGIN CATCH
					ROLLBACK TRANSACTION;
					THROW;
		END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[spAssignAssetEmployeeUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spAssignAssetEmployeeUploads]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[spAssignAssetEmployeeUploads] AS' 
END
GO
-- =============================================
-- Author:		Mark Magaoay
-- Update Date: 01/22/2021
-- Description:	This will update asset data
-- =============================================
ALTER PROCEDURE [dbo].[spAssignAssetEmployeeUploads]
(
@createdBy VARCHAR(10) = NULL
)
AS
BEGIN

		SET NOCOUNT ON;

		BEGIN TRY	

			DECLARE @date DATETIME = GETDATE()
			DECLARE @InvalidCodes VARCHAR(MAX) = NULL
			DECLARE @MSG VARCHAR(2048) = NULL
			BEGIN TRANSACTION
	
			IF OBJECT_ID('tempdb..#InvalidCodes') IS NOT NULL 
			BEGIN
				DROP TABLE #InvalidCodes
			END
	
			IF OBJECT_ID('tempdb..#AssignmentHistory') IS NOT NULL 
			BEGIN
				DROP TABLE #AssignmentHistory
			END

			SELECT a.Code INTO #InvalidCodes FROM dbo.AssignAssetEmployeeUploads a WHERE a.CreatedBy = @createdBy
			AND NOT EXISTS(SELECT 1 FROM dbo.Assets b WHERE b.Code = a.Code)

			SET @InvalidCodes = (SELECT (',[' + Code + ']') AS [text()] FROM #InvalidCodes FOR XML PATH(''))

			IF @InvalidCodes IS NOT NULL
			BEGIN
				SET @MSG = FORMATMESSAGE('CANNOT FIND ASSET %s', STUFF(('' + @InvalidCodes),1,1,''));
				RAISERROR (@MSG,16,1);
			END

			TRUNCATE TABLE #InvalidCodes
			INSERT INTO #InvalidCodes
			SELECT a.Code FROM dbo.AssignAssetEmployeeUploads a WHERE a.CreatedBy = @createdBy
			AND EXISTS(SELECT 1 FROM dbo.AssignAssetEmployees b WHERE b.Code = a.Code)

			SET @InvalidCodes = (SELECT (',[' + Code + ']') AS [text()] FROM #InvalidCodes FOR XML PATH(''))

			IF @InvalidCodes IS NOT NULL
			BEGIN
				SET @MSG = FORMATMESSAGE('CODES %s ALREADY USED', STUFF(('' + @InvalidCodes),1,1,''));
				RAISERROR (@MSG,16,1);
			END

			--check employee
			TRUNCATE TABLE #InvalidCodes
			INSERT INTO #InvalidCodes
			SELECT a.Hrid FROM dbo.AssignAssetEmployeeUploads a WHERE a.CreatedBy = @createdBy
			AND NOT EXISTS(SELECT 1 FROM dbo.Bulks b WHERE b.ID = a.Hrid)
			
			SET @InvalidCodes = (SELECT (',[' + Code + ']') AS [text()] FROM #InvalidCodes FOR XML PATH(''))

			IF @InvalidCodes IS NOT NULL
			BEGIN
				SET @MSG = FORMATMESSAGE('EMPLOYEE WITH HRID %s NOT FOUND', STUFF(('' + @InvalidCodes),1,1,''));
				RAISERROR (@MSG,16,1);
			END
				
			SELECT 
			NEWID()[Id],
			a.Code,
			a.WorkType,
			a.Hrid,
			a.Floor,
			a.Area,
			a.Address,
			a.ContactNo,
			a.CreatedBy,
			@date[DateCreated],
            a.Email,
			a.TrackingNo,
			a.TicketNo
			INTO #AssignmentHistory
			FROM dbo.AssignAssetEmployeeUploads a WHERE a.CreatedBy = @createdBy
				
			INSERT INTO dbo.AssignAssetEmployees (Id,
			                                  Code,
			                                  WorkType,
			                                  Hrid,
			                                  Floor,
			                                  Area,
			                                  Address,
			                                  ContactNo,
			                                  CreatedBy,
			                                  DateCreated,
											  Email,
											  TrackingNo,
											  TicketNo)
			SELECT 
			a.Id,
			a.Code,
			a.WorkType,
			a.Hrid,
			a.Floor,
			a.Area,
			a.Address,
			a.ContactNo,
			a.CreatedBy,
			a.DateCreated,
            a.Email,
			a.TrackingNo,
			a.TicketNo
			FROM #AssignmentHistory a WHERE a.CreatedBy = @createdBy
				
			INSERT INTO dbo.AssignAssetEmployeeHistories (Id,
			                                          Code,
			                                          WorkType,
			                                          Hrid,
			                                          Floor,
			                                          Area,
			                                          Address,
			                                          ContactNo,
			                                          CreatedBy,
			                                          DateCreated,
													  Email,
													  TrackingNo,
													  TicketNo)
			SELECT 
			a.Id,
			a.Code,
			a.WorkType,
			a.Hrid,
			a.Floor,
			a.Area,
			a.Address,
			a.ContactNo,
			a.CreatedBy,
			a.DateCreated,
            a.Email,
			a.TrackingNo,
			a.TicketNo
			FROM #AssignmentHistory a WHERE a.CreatedBy = @createdBy
	
			DELETE FROM dbo.AssignAssetEmployeeUploads WHERE CreatedBy = @createdBy

			COMMIT TRANSACTION;
		END TRY
		BEGIN CATCH
					ROLLBACK TRANSACTION;
					THROW;
		END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[spAssignedAssetChangeUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spAssignedAssetChangeUploads]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[spAssignedAssetChangeUploads] AS' 
END
GO
-- =============================================
-- Author:		Mark Magaoay
-- Create Date: 01/72/2021
-- Description:	This will update asset data
-- =============================================
ALTER PROCEDURE [dbo].[spAssignedAssetChangeUploads]
(
@createdBy VARCHAR(10) = NULL
)
AS
BEGIN

		SET NOCOUNT ON;

		BEGIN TRY	

			DECLARE @date DATETIME = GETDATE()
			DECLARE @InvalidCodes VARCHAR(MAX) = NULL
			DECLARE @MSG VARCHAR(2048) = NULL
			BEGIN TRANSACTION
	
			IF OBJECT_ID('tempdb..#InvalidCodes') IS NOT NULL 
			BEGIN
				DROP TABLE #InvalidCodes
			END

			SELECT a.FromCode[Code] INTO #InvalidCodes FROM dbo.AssignedAssetChangeUploads a WHERE a.CreatedBy = @createdBy
			AND NOT EXISTS(SELECT 1 FROM dbo.Assets b WHERE b.Code = a.FromCode)

			SET @InvalidCodes = (SELECT (',[' + Code + ']') AS [text()] FROM #InvalidCodes FOR XML PATH(''))

			IF @InvalidCodes IS NOT NULL
			BEGIN
				SET @MSG = FORMATMESSAGE('CANNOT FIND ASSET %s', STUFF(('' + @InvalidCodes),1,1,''));
				RAISERROR (@MSG,16,1);
			END

			TRUNCATE TABLE #InvalidCodes
			INSERT INTO #InvalidCodes (Code)
			SELECT a.ToCode FROM dbo.AssignedAssetChangeUploads a WHERE a.CreatedBy = @createdBy
			AND NOT EXISTS(SELECT 1 FROM dbo.Assets b WHERE b.Code = a.ToCode)

			SET @InvalidCodes = (SELECT (',[' + Code + ']') AS [text()] FROM #InvalidCodes FOR XML PATH(''))

			IF @InvalidCodes IS NOT NULL
			BEGIN
				SET @MSG = FORMATMESSAGE('CANNOT FIND ASSET %s', STUFF(('' + @InvalidCodes),1,1,''));
				RAISERROR (@MSG,16,1);
			END

			TRUNCATE TABLE #InvalidCodes
			INSERT INTO #InvalidCodes (Code)
			SELECT a.FromCode FROM dbo.AssignedAssetChangeUploads a WHERE a.CreatedBy = @createdBy
			AND NOT EXISTS(SELECT 1 FROM dbo.AssignAssetEmployees b WHERE b.Code = a.FromCode)

			SET @InvalidCodes = (SELECT (',[' + Code + ']') AS [text()] FROM #InvalidCodes FOR XML PATH(''))

			IF @InvalidCodes IS NOT NULL
			BEGIN
				SET @MSG = FORMATMESSAGE('CANNOT FIND ASSIGNMENT OF CODE %s', STUFF(('' + @InvalidCodes),1,1,''));
				RAISERROR (@MSG,16,1);
			END
			
			UPDATE a
			SET a.Code = b.ToCode
			FROM dbo.AssignAssetEmployees a
			LEFT JOIN dbo.AssignedAssetChangeUploads b ON b.FromCode = a.Code
			WHERE b.CreatedBy = @createdBy
					   			 
			INSERT INTO dbo.AssignedAssetChangeHistories		 (Id,
			                                                      CodeFrom,
			                                                      CodeTo,
			                                                      CreatedBy,
			                                                      DateCreated,
																  TrackingNo,
																  TicketNo)
			SELECT 
			NEWID(),
            FromCode,
            ToCode,
            CreatedBy,
			@date,
			TrackingNo,
			TicketNo
			FROM dbo.AssignedAssetChangeUploads WHERE CreatedBy = @createdBy

			DELETE FROM dbo.AssignedAssetChangeUploads WHERE CreatedBy = @createdBy

			COMMIT TRANSACTION;
		END TRY
		BEGIN CATCH
					ROLLBACK TRANSACTION;
					THROW;
		END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[spGetAssets]    Script Date: 1/27/2021 9:32:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spGetAssets]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[spGetAssets] AS' 
END
GO
ALTER PROCEDURE [dbo].[spGetAssets]
(
@PageNumber INT = 1,
@PageSize   INT = 10,
@Filter VARCHAR(1000) = '%',
@Site VARCHAR(1000) = NULL,
@Status VARCHAR(1000) = NULL,
@Category VARCHAR(1000) = NULL,
@SubCategory VARCHAR(1000) = NULL,
@Manufacturer VARCHAR(1000) = NULL,
@WorkType VARCHAR(1000) = NULL
)
WITH RECOMPILE
AS
BEGIN

		SET NOCOUNT ON;

		IF @PageSize = 0
		BEGIN
		    SET @PageSize = 10
		END
		
		IF @Filter = '' OR @Filter IS NULL
		BEGIN
		    SET @Filter = '%'
		END

		IF @WorkType = ''
		BEGIN
		    SET @WorkType = NULL
		END

		IF @Manufacturer = ''
		BEGIN
		    SET @Manufacturer = NULL
		END

		IF @SubCategory = ''
		BEGIN
		    SET @SubCategory = NULL
		END

		IF @Category = ''
		BEGIN
		    SET @Category = NULL
		END

		IF @Status = ''
		BEGIN
		    SET @Status = NULL
		END

		IF @Site = ''
		BEGIN
		    SET @Site = NULL
		END

		IF @Status = ''
		BEGIN
		    SET @Status = NULL
		END

		IF OBJECT_ID('tempdb..#TopTen') IS NOT NULL 
		BEGIN
			DROP TABLE #TopTen
		END

		SELECT 
		a.Id,
		a.Code
		INTO #TopTen
		FROM dbo.Assets a
		LEFT JOIN dbo.Categories b ON b.Id = a.CategoryId
		LEFT JOIN dbo.SubCategories c ON c.Id = a.SubCategoryId
		LEFT JOIN dbo.Manufacturers d ON d.Id = a.ManufacturerId
		LEFT JOIN dbo.Status e ON e.Id = a.StatusId
		LEFT JOIN dbo.AssignAssetEmployees f ON f.Code = a.Code
		LEFT JOIN dbo.Bulks g ON g.ID = f.Hrid
		WHERE a.IsActive = 1
		AND (a.Site = @Site OR @Site IS NULL)
		AND (b.Code = @Category OR @Category IS NULL)
		AND (c.Code = @SubCategory OR @SubCategory IS NULL)
		AND ((CASE WHEN g.UserId IS NOT NULL THEN 'IN USE' ELSE e.Code END) = @Status OR @Status IS NULL)
		AND (d.Code = @Manufacturer OR @Manufacturer IS NULL)
		AND (f.WorkType = @WorkType OR @WorkType IS NULL)
		AND (
				a.Code LIKE @Filter 
				OR a.Description LIKE @Filter
				OR a.SerialNo LIKE @Filter
				OR g.FirstName LIKE @Filter
				OR g.LastName LIKE @Filter
				OR f.Floor LIKE @Filter
				OR f.Area LIKE @Filter
				OR f.Address LIKE @Filter
				OR f.ContactNo LIKE @Filter
				OR f.TrackingNo LIKE @Filter
				OR f.TicketNo LIKE @Filter
				OR f.Email LIKE @Filter
		)
		GROUP BY a.id, a.Code
		ORDER BY a.Code ASC
		OFFSET @PageSize * (@PageNumber) ROWS
		FETCH NEXT @PageSize ROWS ONLY
		OPTION (OPTIMIZE FOR (@PageSize=10, @PageNumber=0, @Filter = '%', @Site UNKNOWN, @Category UNKNOWN, @SubCategory UNKNOWN, @Manufacturer UNKNOWN, @WorkType UNKNOWN, @Status UNKNOWN))

		SELECT 
		a.Code,
		a.Description,
		a.SerialNo,
		b.Code[Category],
		c.Code[SubCategory],
		CASE WHEN g.UserId IS NOT NULL THEN 'IN USE' ELSE e.Code END[Status],
		d.Code[Manufacturer],
		f.ContactNo,
		a.Vendor,
		a.PurchaseOrder,
		CASE WHEN LEN(LTRIM(RTRIM(a.CostValue))) > 0 THEN CONCAT('$',a.CostValue) ELSE '' END[CostValue],
		a.Year,
		a.Month,
		a.IsDisposed,
		a.Site,
		CONCAT(g.FirstName, ' ', g.LastName)[EmployeeName],
		f.WorkType,
		f.Floor,
		f.Area,
		f.Address,
		f.Email,
		f.TrackingNo,
		f.TicketNo
		FROM dbo.Assets a
		LEFT JOIN dbo.Categories b ON b.Id = a.CategoryId
		LEFT JOIN dbo.SubCategories c ON c.Id = a.SubCategoryId
		LEFT JOIN dbo.Manufacturers d ON d.Id = a.ManufacturerId
		LEFT JOIN dbo.Status e ON e.Id = a.StatusId
		LEFT JOIN dbo.AssignAssetEmployees f ON f.Code = a.Code
		LEFT JOIN dbo.Bulks g ON g.ID = f.Hrid
		WHERE EXISTS(SELECT 1 FROM #TopTen aa WHERE aa.Id = a.Id)
		ORDER BY a.Code ASC
END
GO
/****** Object:  StoredProcedure [dbo].[spGetAssetsByHrid]    Script Date: 1/27/2021 9:32:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spGetAssetsByHrid]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[spGetAssetsByHrid] AS' 
END
GO
-- =============================================
-- Author:		Mark Magaoay
-- Create date: 10/02/2020
-- Description:	This will get assets based on the HRID of the employee
-- =============================================
ALTER PROCEDURE [dbo].[spGetAssetsByHrid]
(
@hrid VARCHAR(6) = NULL
)
AS
BEGIN

		SET NOCOUNT ON;

		SELECT 
		ROW_NUMBER() OVER (ORDER BY a.Code) [row],
		b.Code[refNo],
		b.site,
		d.Code[category],
		a.Code[serialNo],
		b.vendor,
		b.purchaseOrder,
		b.costValue,
		a.hrid,
		a.dateCreated[date],
		'DEPLOYED'[status],
		--ROW_NUMBER() OVER (ORDER BY a.Code) [id],
		b.IsActive[isActive],
		SUBSTRING(a.CreatedBy, 4, LEN(a.CreatedBy))[createdBy],
		NULL[updatedBy],
		NULL[dateUpdated],
		a.dateCreated
		FROM dbo.AssignAssetEmployees a
		INNER JOIN dbo.Assets b ON b.IsDisposed = 0 AND b.Code = a.Code
		LEFT JOIN dbo.Categories c ON c.Id = b.CategoryId
		LEFT JOIN dbo.SubCategories d ON d.Id = b.SubCategoryId
		LEFT JOIN dbo.Status e ON e.Id = b.StatusId
		WHERE a.Hrid = @hrid

END
GO
/****** Object:  StoredProcedure [dbo].[spGetAssetsRaw]    Script Date: 1/27/2021 9:32:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spGetAssetsRaw]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[spGetAssetsRaw] AS' 
END
GO
ALTER PROCEDURE [dbo].[spGetAssetsRaw]
(
@Filter VARCHAR(1000) = NULL,
@Site VARCHAR(1000) = NULL,
@Status VARCHAR(1000) = NULL,
@Category VARCHAR(1000) = NULL,
@SubCategory VARCHAR(1000) = NULL,
@Manufacturer VARCHAR(1000) = NULL,
@WorkType VARCHAR(1000) = NULL
)
WITH RECOMPILE
AS
BEGIN

		SET NOCOUNT ON;

		IF @Filter = '' OR @Filter IS NULL
		BEGIN
		    SET @Filter = '%'
		END

		IF @WorkType = ''
		BEGIN
		    SET @WorkType = NULL
		END

		IF @Manufacturer = ''
		BEGIN
		    SET @Manufacturer = NULL
		END

		IF @SubCategory = ''
		BEGIN
		    SET @SubCategory = NULL
		END

		IF @Category = ''
		BEGIN
		    SET @Category = NULL
		END

		IF @Status = ''
		BEGIN
		    SET @Status = NULL
		END

		IF @Site = ''
		BEGIN
		    SET @Site = NULL
		END

		IF @Status = ''
		BEGIN
		    SET @Status = NULL
		END

		IF OBJECT_ID('tempdb..#TopTen') IS NOT NULL 
		BEGIN
			DROP TABLE #TopTen
		END

		SELECT 
		a.Id,
		a.Code
		INTO #TopTen
		FROM dbo.Assets a
		LEFT JOIN dbo.Categories b ON b.Id = a.CategoryId
		LEFT JOIN dbo.SubCategories c ON c.Id = a.SubCategoryId
		LEFT JOIN dbo.Manufacturers d ON d.Id = a.ManufacturerId
		LEFT JOIN dbo.Status e ON e.Id = a.StatusId
		LEFT JOIN dbo.AssignAssetEmployees f ON f.Code = a.Code
		LEFT JOIN dbo.Bulks g ON g.ID = f.Hrid
		WHERE a.IsActive = 1
		AND (a.Site = @Site OR @Site IS NULL)
		AND (b.Code = @Category OR @Category IS NULL)
		AND (c.Code = @SubCategory OR @SubCategory IS NULL)
		AND ((CASE WHEN g.UserId IS NOT NULL THEN 'IN USE' ELSE e.Code END) = @Status OR @Status IS NULL)
		AND (d.Code = @Manufacturer OR @Manufacturer IS NULL)
		AND (f.WorkType = @WorkType OR @WorkType IS NULL)
		AND (a.Code LIKE @Filter 
		OR a.Description LIKE @Filter
		OR a.SerialNo LIKE @Filter
		OR g.FirstName LIKE @Filter
		OR g.LastName LIKE @Filter
		OR f.Floor LIKE @Filter
		OR f.Area LIKE @Filter
		OR f.Address LIKE @Filter
		OR f.ContactNo LIKE @Filter)
		GROUP BY a.id, a.Code
		ORDER BY a.Code ASC
		OPTION (OPTIMIZE FOR (@Filter = '%', @Site UNKNOWN, @Category UNKNOWN, @SubCategory UNKNOWN, @Manufacturer UNKNOWN, @WorkType UNKNOWN, @Status UNKNOWN))

		SELECT 
		a.Code[REF_NO],
		a.Description[DESCRIPTION],
		a.SerialNo[SERIAL_NO],
		b.Code[CATEGORY],
		c.Code[SUBCATEGORY],
		d.Code[BRAND],
		CASE WHEN g.UserId IS NOT NULL THEN 'IN USE' ELSE e.Code END[STATUS],
		a.Site[SITE],
		f.WorkType[WAH_WAS],
		CONCAT(g.FirstName, ' ', g.LastName)[NAME],
		f.Floor[FLOOR],
		f.Area[AREA],
		f.ContactNo[CONTACT_NO],
		f.Address[ADDRESS],
		a.Vendor[VENDOR],
		a.PurchaseOrder[PURCHASE_ORDER_#],
		a.CostValue[COST_VALUE],
		a.CreatedBy[ASSET_UPLOADED_BY],
		a.DateCreated[ASSET_DATE_UPLOADED]
		FROM dbo.Assets a
		LEFT JOIN dbo.Categories b ON b.Id = a.CategoryId
		LEFT JOIN dbo.SubCategories c ON c.Id = a.SubCategoryId
		LEFT JOIN dbo.Manufacturers d ON d.Id = a.ManufacturerId
		LEFT JOIN dbo.Status e ON e.Id = a.StatusId
		LEFT JOIN dbo.AssignAssetEmployees f ON f.Code = a.Code
		LEFT JOIN dbo.Bulks g ON g.ID = f.Hrid
		WHERE EXISTS(SELECT 1 FROM #TopTen aa WHERE aa.Id = a.Id)
		ORDER BY a.Code ASC
END
GO
/****** Object:  StoredProcedure [dbo].[spGetScannedAsset]    Script Date: 1/27/2021 9:32:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spGetScannedAsset]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[spGetScannedAsset] AS' 
END
GO
ALTER PROCEDURE [dbo].[spGetScannedAsset]
(
@Id UNIQUEIDENTIFIER = NULL
)
WITH RECOMPILE
AS
BEGIN

		SET NOCOUNT ON;

		SELECT 
		a.Code,
		a.Description,
		a.SerialNo,
		b.Code[Category],
		c.Code[SubCategory],
		CASE WHEN g.UserId IS NOT NULL THEN 'IN USE' ELSE e.Code END[Status],
		d.Code[Manufacturer],
		a.Year,
		a.Month,
		a.IsDisposed,
		a.Site,
		CONCAT(g.FirstName, ' ', g.LastName)[EmployeeName],
		f.WorkType,
		f.Floor,
		f.Area,
		f.Address,
		f.ContactNo,
		a.Vendor,
		a.PurchaseOrder,
		a.CostValue
		FROM dbo.Assets a
		LEFT JOIN dbo.Categories b ON b.Id = a.CategoryId
		LEFT JOIN dbo.SubCategories c ON c.Id = a.SubCategoryId
		LEFT JOIN dbo.Manufacturers d ON d.Id = a.ManufacturerId
		LEFT JOIN dbo.Status e ON e.Id = a.StatusId
		LEFT JOIN dbo.AssignAssetEmployees f ON f.Code = a.Code
		LEFT JOIN dbo.Bulks g ON g.ID = f.Hrid
		WHERE a.Id = @Id

END
GO
/****** Object:  StoredProcedure [dbo].[spLocationTransferUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spLocationTransferUploads]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[spLocationTransferUploads] AS' 
END
GO
-- =============================================
-- Author:		Mark Magaoay
-- Update Date: 01/22/2021
-- Description:	This will update asset data
-- =============================================
ALTER PROCEDURE [dbo].[spLocationTransferUploads]
(
@createdBy VARCHAR(10) = NULL
)
AS
BEGIN

		SET NOCOUNT ON;

		BEGIN TRY	

			DECLARE @date DATETIME = GETDATE()
			DECLARE @InvalidCodes VARCHAR(MAX) = NULL
			BEGIN TRANSACTION
	
			IF OBJECT_ID('tempdb..#InvalidCodes') IS NOT NULL 
			BEGIN
				DROP TABLE #InvalidCodes
			END

			SELECT a.Code INTO #InvalidCodes FROM dbo.LocationTransferUploads a WHERE a.CreatedBy = @createdBy
			AND NOT EXISTS(SELECT 1 FROM dbo.Assets b WHERE b.Code = a.Code)

			SET @InvalidCodes = (SELECT (',[' + Code + ']') AS [text()] FROM #InvalidCodes FOR XML PATH(''))

			IF @InvalidCodes IS NOT NULL
			BEGIN
				DECLARE @MSG VARCHAR(2048) = FORMATMESSAGE('CANNOT FIND ASSET %s', STUFF(('' + @InvalidCodes),1,1,''));
				RAISERROR (@MSG,16,1);
			END

			INSERT INTO dbo.LocationTransferHistories (Id,
												   Code,
												   [From],
												   [To],
												   CreatedBy,
												   DateCreated,
												   TrackingNo,
												   TicketNo)
			SELECT
			NEWID()[Id],
			a.Code,
			a.Site[From],
			b.Site[To],
			@createdBy[CreatedBy],
			@date[DateCreated],
			b.TrackingNo,
			b.TicketNo
			FROM dbo.Assets a
			INNER JOIN dbo.LocationTransferUploads b ON b.Code = a.Code AND b.CreatedBy = @createdBy

			UPDATE a
			SET a.UpdatedBy = @createdBy, a.DateUpdated = @date, a.Site = b.Site
			FROM dbo.Assets a
			INNER JOIN dbo.LocationTransferUploads b ON b.Code = a.Code AND b.CreatedBy = @createdBy
	
			DELETE FROM dbo.LocationTransferUploads WHERE CreatedBy = @createdBy

			COMMIT TRANSACTION;
		END TRY
		BEGIN CATCH
					ROLLBACK TRANSACTION;
					THROW;
		END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[spRemoveAssignedAssetEmployeeUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spRemoveAssignedAssetEmployeeUploads]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[spRemoveAssignedAssetEmployeeUploads] AS' 
END
GO
-- =============================================
-- Author:		Mark Magaoay
-- Update Date: 01/22/2021
-- Description:	This will update asset data
-- =============================================
ALTER PROCEDURE [dbo].[spRemoveAssignedAssetEmployeeUploads]
(
@createdBy VARCHAR(10) = NULL
)
AS
BEGIN

		SET NOCOUNT ON;

		BEGIN TRY	

			DECLARE @date DATETIME = GETDATE()
			DECLARE @InvalidCodes VARCHAR(MAX) = NULL
			DECLARE @MSG VARCHAR(2048) = NULL
			BEGIN TRANSACTION
	
			IF OBJECT_ID('tempdb..#InvalidCodes') IS NOT NULL 
			BEGIN
				DROP TABLE #InvalidCodes
			END

			SELECT a.Code INTO #InvalidCodes FROM dbo.RemoveAssignedAssetEmployeeUploads a WHERE a.CreatedBy = @createdBy
			AND NOT EXISTS(SELECT 1 FROM dbo.Assets b WHERE b.Code = a.Code)

			SET @InvalidCodes = (SELECT (',[' + Code + ']') AS [text()] FROM #InvalidCodes FOR XML PATH(''))

			IF @InvalidCodes IS NOT NULL
			BEGIN
				SET @MSG = FORMATMESSAGE('CANNOT FIND ASSET %s', STUFF(('' + @InvalidCodes),1,1,''));
				RAISERROR (@MSG,16,1);
			END

			TRUNCATE TABLE #InvalidCodes
			INSERT INTO #InvalidCodes (Code)
			SELECT a.Code FROM dbo.RemoveAssignedAssetEmployeeUploads a WHERE a.CreatedBy = @createdBy
			AND NOT EXISTS(SELECT 1 FROM dbo.AssignAssetEmployees b WHERE b.Code = a.Code)

			SET @InvalidCodes = (SELECT (',[' + Code + ']') AS [text()] FROM #InvalidCodes FOR XML PATH(''))

			IF @InvalidCodes IS NOT NULL
			BEGIN
				SET @MSG = FORMATMESSAGE('CANNOT FIND ASSIGNMENT ON CODE %s', STUFF(('' + @InvalidCodes),1,1,''));
				RAISERROR (@MSG,16,1);
			END
			
			TRUNCATE TABLE #InvalidCodes
			INSERT INTO #InvalidCodes (Code)
			SELECT a.Code FROM dbo.RemoveAssignedAssetEmployeeUploads a WHERE a.CreatedBy = @createdBy		
	
			DELETE FROM dbo.AssignAssetEmployees 
			WHERE Code IN (SELECT Code FROM #InvalidCodes)

			INSERT INTO dbo.RemoveAssignedAssetEmployeeHistories (Id,
			                                                      Code,
			                                                      CreatedBy,
			                                                      DateCreated,
																  TrackingNo,
																  TicketNo)
			SELECT 
			NEWID(),
            Code,
            CreatedBy,
			@date,
			TrackingNo,
			TicketNo
			FROM dbo.RemoveAssignedAssetEmployeeUploads WHERE CreatedBy = @createdBy

			DELETE FROM dbo.RemoveAssignedAssetEmployeeUploads WHERE CreatedBy = @createdBy

			COMMIT TRANSACTION;
		END TRY
		BEGIN CATCH
					ROLLBACK TRANSACTION;
					THROW;
		END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[spReplaceUploads]    Script Date: 1/27/2021 9:32:38 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[spReplaceUploads]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[spReplaceUploads] AS' 
END
GO
-- =============================================
-- Author:		Mark Magaoay
-- Update Date: 01/22/2021
-- Description:	This will update asset data
-- =============================================
ALTER PROCEDURE [dbo].[spReplaceUploads]
(
@createdBy VARCHAR(10) = NULL
)
AS
BEGIN

		SET NOCOUNT ON;

		BEGIN TRY	

			DECLARE @date DATETIME = GETDATE()
			DECLARE @InvalidCodes VARCHAR(MAX) = NULL
			BEGIN TRANSACTION
	
			IF OBJECT_ID('tempdb..#InvalidCodes') IS NOT NULL 
			BEGIN
				DROP TABLE #InvalidCodes
			END

			SELECT a.Code INTO #InvalidCodes FROM dbo.ReplaceUploads a WHERE a.CreatedBy = @createdBy
			AND NOT EXISTS(SELECT 1 FROM dbo.Assets b WHERE b.Code = a.Code)

			SET @InvalidCodes = (SELECT (',[' + Code + ']') AS [text()] FROM #InvalidCodes FOR XML PATH(''))

			IF @InvalidCodes IS NOT NULL
			BEGIN
				DECLARE @MSG VARCHAR(2048) = FORMATMESSAGE('CANNOT FIND ASSET %s', STUFF(('' + @InvalidCodes),1,1,''));
				RAISERROR (@MSG,16,1);
			END

			INSERT INTO dbo.ReplaceHistories (Id,
											  Code,
											  FromSerial,
											  ToSerial,
											  FromManufacturer,
											  ToManufacturer,
											  CreatedBy,
											  DateCreated,
											  FromVendor,
                                              FromPurchaseOrder,
                                              FromCostValue,
											  ToVendor,
                                              ToPurchaseOrder,
                                              ToCostValue
											  )
			SELECT
			NEWID()[Id],
			a.Code,
			a.SerialNo[FromSerial],
			b.Serial[ToSerial],
			d.Code[FromManufacturer],
			b.Manufacturer[ToManufacturer],
			@createdBy[CreatedBy],
			@date[DateCreated],
			a.Vendor,
			a.PurchaseOrder,
			a.CostValue,
			b.Vendor,
			b.PurchaseOrder,
			b.CostValue
			FROM dbo.Assets a
			INNER JOIN dbo.ReplaceUploads b ON b.Code = a.Code AND b.CreatedBy = @createdBy
			LEFT JOIN dbo.Manufacturers c ON c.Code = b.Manufacturer
			LEFT JOIN dbo.Manufacturers d ON d.Id = a.ManufacturerId

			UPDATE a
			SET a.SerialNo = b.Serial, a.ManufacturerId = c.Id, a.UpdatedBy = @createdBy, a.DateUpdated = @date,
			a.Vendor = b.Vendor, a.PurchaseOrder = b.PurchaseOrder, a.CostValue = b.CostValue
			FROM dbo.Assets a
			INNER JOIN dbo.ReplaceUploads b ON b.Code = a.Code AND b.CreatedBy = @createdBy
			LEFT JOIN dbo.Manufacturers c ON c.Code = b.Manufacturer
	
			DELETE FROM dbo.ReplaceUploads WHERE CreatedBy = @createdBy

			COMMIT TRANSACTION;
		END TRY
		BEGIN CATCH
					ROLLBACK TRANSACTION;
					THROW;
		END CATCH

END
GO
